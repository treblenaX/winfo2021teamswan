[{"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\index.js":"1","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\reportWebVitals.js":"2","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Tile.ts":"3","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\CreateProjectPage.tsx":"4","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\Homepage.tsx":"5","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\ProjectPage.tsx":"6","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Project.ts":"7","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\Homepage.tsx":"8","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Photo.ts":"9"},{"size":3055,"mtime":1610861858970,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1610838498127,"results":"12","hashOfConfig":"11"},{"size":983,"mtime":1610855771460,"results":"13","hashOfConfig":"11"},{"size":3190,"mtime":1610855912558,"results":"14","hashOfConfig":"11"},{"size":5738,"mtime":1610855806132,"results":"15","hashOfConfig":"11"},{"size":2736,"mtime":1610861834531,"results":"16","hashOfConfig":"11"},{"size":1350,"mtime":1610860243748,"results":"17","hashOfConfig":"11"},{"size":5738,"mtime":1610855884564,"results":"18","hashOfConfig":"11"},{"size":252,"mtime":1610861319534,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"17qvdjy",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\index.js",["44","45","46","47","48"],"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\reportWebVitals.js",[],["49","50"],"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Tile.ts",["51"],"import axios from \"axios\";\r\nimport {Project} from \"./Project\";\r\n\r\nexport type Tile = {\r\n  title: string,\r\n  authorId: string,\r\n  dateTime: Date,\r\n  projectId: number,\r\n  content: string\r\n}\r\n\r\n// export function getAllTiles() {\r\n//   axios.get('localhost:3001/api/tile/getall').then(\r\n//     (res: any) => res.data\r\n//   ).catch(\r\n//     (err: any) => console.log(err)\r\n//   )\r\n// }\r\n\r\nexport const getAllTiles = ():\r\n  Promise<Tile[]> => axios.get<Tile[]>(`localhost:3001/api/tile/getall`)\r\n  .then((res) => res.data);\r\n\r\nexport const getTileById = (id: string): Promise<Tile> => axios.get<Tile>(`localhost:3001/api/tile/id/{id}`).then((res) => res.data);\r\n\r\nexport const modifyProjectById = (id: string, tile: Tile):\r\n  Promise<null> => axios.put<null>(`localhost:3001/api/tile/id/{id}`, tile)\r\n  .then((res) => res.data);\r\n\r\nexport const createTile = (tile: Tile):\r\n  Promise<Tile> => axios.post<Tile>(`localhost:3001/api/tile/createtile`)\r\n  .then((res) => res.data);\r\n\r\nexport const deleteTile = (id: string):\r\n  Promise<null> => axios.delete<null>(`localhost:3001/api/tile/id/{id}`)\r\n  .then((res) => res.data);\r\n\r\nexport const deleteAll = ():\r\n  Promise<null> => axios.delete<null>(`localhost:3001/api/tile/deleteall`)\r\n  .then((res) => res.data);",["52","53"],"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\CreateProjectPage.tsx",[],"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\Homepage.tsx",["54","55"],"import React, {useEffect, useState} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { Typography } from '@material-ui/core';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport {getAllTiles, Tile} from '../api/Tile';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        light: '#ffffff',\r\n        main: '#f3e5f5',\r\n        dark: '#c0b3c2',\r\n        contrastText: '#000000',\r\n      },\r\n      secondary: {\r\n        light: '#edffff',\r\n        main: '#baddf9',\r\n        dark: '#89abc6',\r\n        contrastText: '#000000',\r\n      },\r\n    },\r\n  });\r\n\r\n// styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(2),\r\n        backgroundColor: '#c8e6c9',\r\n        height: '1000vw',\r\n    },\r\n    appbar: {\r\n        color: '#000000',\r\n        backgroundColor: \"#e1f5fe\",\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 0,\r\n      margin: theme.spacing(4),\r\n    },\r\n    card: {\r\n      padding: theme.spacing(8),\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      backgroundColor: '#ffffff',\r\n    },\r\n    controls: {\r\n      align: 'right',\r\n    },\r\n    button: {\r\n      backgroundColor: '#ffffff',\r\n      color: '#000',\r\n    },\r\n    checkbox: {\r\n        color: '#ffffff',\r\n        '&$checked': {\r\n            color: '#ffffff',\r\n        },\r\n    }\r\n}));\r\n\r\n// todo: \r\n// - pass in a onClickListener to FormControlLabel to handle the\r\n// clicking of the checkbox\r\n// - handle the clicking of the Post New Project button\r\n// function Controls(state: any, callback: any) {\r\n//     const classes = useStyles();\r\n//     return (\r\n//         <AppBar position=\"static\">\r\n//             <Toolbar>\r\n//                 <Typography variant=\"h1\" className={classes.title}>\r\n//                     Agora\r\n//                 </Typography>\r\n//                 <FormControlLabel\r\n//                     control={<Checkbox checked={state.isOpenOnly} onClick={callback} name=\"isOpenOnly\" />}\r\n//                     label=\"Is Open\"\r\n//                 />\r\n//                 <Button variant=\"contained\" color=\"secondary\" href=\"#contained-buttons\">\r\n//                     Post New Project\r\n//                 </Button>\r\n//             </Toolbar>\r\n//         </AppBar>\r\n//     );\r\n// }\r\n\r\nfunction TimelineItem(item: Tile) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Card className={classes.card}>\r\n                <Typography variant=\"caption\">{item.dateTime}</Typography>\r\n                <Typography variant=\"h4\">{item.title}</Typography>\r\n                <Typography variant=\"body2\">{item.content}</Typography>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction Timeline(props: {items: Tile[] }) {\r\n    const {items} = props;\r\n    return (\r\n        <Grid container >\r\n            {\r\n                items.map((item, index) => (\r\n                  <TimelineItem title={item.title} authorId={item.authorId} dateTime={item.dateTime} projectId={item.projectId} content={item.content} />\r\n                ))\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n\r\n// todo: add dynamic state functionality\r\nfunction Homepage() {\r\n    const [tiles, setTiles] = useState<Tile[] | null>(null)\r\n    const [state, setState] = useState({\r\n        checkedA: true,\r\n    });\r\n\r\n    ///////////////////////////////////////////////////////\r\n    // todo: trigger a change to display only open projects\r\n    ///////////////////////////////////////////////////////\r\n    const handleCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n    //////////////////////////////////////////////\r\n    // todo: bring user to the create project page\r\n    //////////////////////////////////////////////\r\n    const handleButton = (event: any) => {\r\n        console.log('New Project Button');\r\n    }\r\n    \r\n    useEffect(() => {\r\n    const tiles = getAllTiles()\r\n      .then((data) => setTiles(data))\r\n    })\r\n    \r\n    // replace props with TypeScript typed information\r\n    const classes = useStyles();\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n            <AppBar position=\"static\" className={classes.appbar}>\r\n                <Toolbar>\r\n                    <div>\r\n                        <Typography variant=\"h2\" className={classes.title}>\r\n                            Agora\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.controls}>\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={state.checkedA} onChange={handleCheckbox} name=\"checkedA\" className={classes.checkbox} />}\r\n                            label=\"Is Open Only\"\r\n                        />\r\n                        <Button onClick={handleButton} variant=\"contained\" className={classes.button}>\r\n                            Post New Project\r\n                        </Button>\r\n                    </div>\r\n                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            <Timeline items = {tiles as Tile[]} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Homepage;","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\ProjectPage.tsx",["56","57"],"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Project.ts",[],"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\Homepage.tsx",["58"],"import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { Typography } from '@material-ui/core';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Tile } from './api/Tile';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        light: '#ffffff',\r\n        main: '#f3e5f5',\r\n        dark: '#c0b3c2',\r\n        contrastText: '#000000',\r\n      },\r\n      secondary: {\r\n        light: '#edffff',\r\n        main: '#baddf9',\r\n        dark: '#89abc6',\r\n        contrastText: '#000000',\r\n      },\r\n    },\r\n  });\r\n\r\n// styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(2),\r\n        backgroundColor: '#c8e6c9',\r\n        height: '1000vw',\r\n    },\r\n    appbar: {\r\n        color: '#000000',\r\n        backgroundColor: \"#e1f5fe\",\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 0,\r\n      margin: theme.spacing(4),\r\n    },\r\n    card: {\r\n      padding: theme.spacing(8),\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      backgroundColor: '#ffffff',\r\n    },\r\n    controls: {\r\n      align: 'right',\r\n    },\r\n    button: {\r\n      backgroundColor: '#ffffff',\r\n      color: '#000',\r\n    },\r\n    checkbox: {\r\n        color: '#ffffff',\r\n        '&$checked': {\r\n            color: '#ffffff',\r\n        },\r\n    }\r\n}));\r\n\r\n// todo: \r\n// - pass in a onClickListener to FormControlLabel to handle the\r\n// clicking of the checkbox\r\n// - handle the clicking of the Post New Project button\r\n// function Controls(state: any, callback: any) {\r\n//     const classes = useStyles();\r\n//     return (\r\n//         <AppBar position=\"static\">\r\n//             <Toolbar>\r\n//                 <Typography variant=\"h1\" className={classes.title}>\r\n//                     Agora\r\n//                 </Typography>\r\n//                 <FormControlLabel\r\n//                     control={<Checkbox checked={state.isOpenOnly} onClick={callback} name=\"isOpenOnly\" />}\r\n//                     label=\"Is Open\"\r\n//                 />\r\n//                 <Button variant=\"contained\" color=\"secondary\" href=\"#contained-buttons\">\r\n//                     Post New Project\r\n//                 </Button>\r\n//             </Toolbar>\r\n//         </AppBar>\r\n//     );\r\n// }\r\n\r\nfunction TimelineItem(item: Tile) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Card className={classes.card}>\r\n                <Typography variant=\"caption\">{item.dateTime}</Typography>\r\n                <Typography variant=\"h4\">{item.title}</Typography>\r\n                <Typography variant=\"body2\">{item.content}</Typography>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction Timeline(props: {items: Tile[] }) {\r\n    const {items} = props;\r\n    return (\r\n        <Grid container >\r\n            {\r\n                items.map((item, index) => (\r\n                  <TimelineItem title={item.title} authorId={item.authorId} dateTime={item.dateTime} projectId={item.projectId} content={item.content} />\r\n                ))\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n\r\n// todo: add dynamic state functionality\r\nfunction Homepage(props: {items: Tile[] }) {\r\n    const {items} = props;\r\n    const [state, setState] = React.useState({\r\n        checkedA: true,\r\n    });\r\n\r\n    ///////////////////////////////////////////////////////\r\n    // todo: trigger a change to display only open projects\r\n    ///////////////////////////////////////////////////////\r\n    const handleCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n    //////////////////////////////////////////////\r\n    // todo: bring user to the create project page\r\n    //////////////////////////////////////////////\r\n    const handleButton = (event: any) => {\r\n        console.log('New Project Button');\r\n    }\r\n\r\n    // replace props with TypeScript typed information\r\n    const classes = useStyles();\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n            <AppBar position=\"static\" className={classes.appbar}>\r\n                <Toolbar>\r\n                    <div>\r\n                        <Typography variant=\"h2\" className={classes.title}>\r\n                            Agora\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.controls}>\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={state.checkedA} onChange={handleCheckbox} name=\"checkedA\" className={classes.checkbox} />}\r\n                            label=\"Is Open Only\"\r\n                        />\r\n                        <Button onClick={handleButton} variant=\"contained\" className={classes.button}>\r\n                            Post New Project\r\n                        </Button>\r\n                    </div>\r\n                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            <Timeline items = {items} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Homepage;",["59","60"],"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Photo.ts",[],{"ruleId":"61","severity":1,"message":"62","line":11,"column":10,"nodeType":"63","messageId":"64","endLine":11,"endColumn":22},{"ruleId":"61","severity":1,"message":"65","line":39,"column":7,"nodeType":"63","messageId":"64","endLine":39,"endColumn":19},{"ruleId":"61","severity":1,"message":"66","line":52,"column":10,"nodeType":"63","messageId":"64","endLine":52,"endColumn":22},{"ruleId":"61","severity":1,"message":"67","line":79,"column":10,"nodeType":"63","messageId":"64","endLine":79,"endColumn":27},{"ruleId":"61","severity":1,"message":"68","line":89,"column":10,"nodeType":"63","messageId":"64","endLine":89,"endColumn":15},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":9,"nodeType":"63","messageId":"64","endLine":2,"endColumn":16},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"75","line":15,"column":7,"nodeType":"63","messageId":"64","endLine":15,"endColumn":12},{"ruleId":"73","severity":1,"message":"76","line":146,"column":11,"nodeType":"63","messageId":"64","endLine":146,"endColumn":16},{"ruleId":"73","severity":1,"message":"77","line":68,"column":10,"nodeType":"63","messageId":"64","endLine":68,"endColumn":25},{"ruleId":"73","severity":1,"message":"78","line":85,"column":10,"nodeType":"63","messageId":"64","endLine":85,"endColumn":22},{"ruleId":"73","severity":1,"message":"75","line":15,"column":7,"nodeType":"63","messageId":"64","endLine":15,"endColumn":12},{"ruleId":"69","replacedBy":"79"},{"ruleId":"71","replacedBy":"80"},"no-unused-vars","'getPhotoById' is defined but never used.","Identifier","unusedVar","'demo_project' is assigned a value but never used.","'demoHomePage' is defined but never used.","'demoCreateProject' is defined but never used.","'start' is defined but never used.","no-native-reassign",["81"],"no-negated-in-lhs",["82"],"@typescript-eslint/no-unused-vars","'Project' is defined but never used.","'theme' is assigned a value but never used.","'tiles' is assigned a value but never used.","'ProjectTimeline' is defined but never used.","'TimelineCard' is defined but never used.",["81"],["82"],"no-global-assign","no-unsafe-negation"]
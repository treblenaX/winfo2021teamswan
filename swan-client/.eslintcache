[{"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\index.js":"1","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\reportWebVitals.js":"2","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Tile.ts":"3","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\CreateProjectPage.tsx":"4","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\Homepage.tsx":"5","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\ProjectPage.tsx":"6","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Project.ts":"7","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Photo.ts":"8"},{"size":3280,"mtime":1610870968945,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1610838498127,"results":"11","hashOfConfig":"10"},{"size":1913,"mtime":1610870793067,"results":"12","hashOfConfig":"10"},{"size":3555,"mtime":1610870759907,"results":"13","hashOfConfig":"10"},{"size":5898,"mtime":1610870872282,"results":"14","hashOfConfig":"10"},{"size":2736,"mtime":1610861834531,"results":"15","hashOfConfig":"10"},{"size":2140,"mtime":1610870429872,"results":"16","hashOfConfig":"10"},{"size":277,"mtime":1610863221398,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"17qvdjy",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\index.js",["41","42","43","44","45"],"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\reportWebVitals.js",[],["46","47"],"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Tile.ts",["48"],"import axios from \"axios\";\r\nimport {Project} from \"./Project\";\r\n\r\nexport type Tile = {\r\n  title: string,\r\n  authorId?: string,\r\n  dateTime: string,\r\n  projectId?: string,\r\n  content: string\r\n}\r\n\r\nconst poo = \"http://localhost:3001\";\r\n\r\nexport interface IServerResponseTiles {\r\n  tiles: Tile[]\r\n}\r\n\r\nexport const getAllTiles = ():\r\n  Promise<IServerResponseTiles> => axios.get<Tile[]>(poo + `/api/tile/getall`)\r\n  .then((res) => {\r\n    const arr: Tile[] = [];\r\n\r\n    const test: any[] = res.data;\r\n\r\n    for (let i = 0; i < test.length; i++) {\r\n      const e: Tile = test[i];\r\n\r\n      const el: Tile = {\r\n        title: e.title,\r\n        authorId: e.authorId,\r\n        dateTime: e.dateTime,\r\n        projectId: e.projectId,\r\n        content: e.content\r\n      };\r\n\r\n      arr.push(el);\r\n    } \r\n\r\n    // for (const e of test) {\r\n    //   const el: Tile = {\r\n    //     title: e.title,\r\n    //     authorId: e.authorId,\r\n    //     dateTime: e.dateTime,\r\n    //     projectId: e.projectId,\r\n    //     content: e.content\r\n    //   };\r\n\r\n    //   console.log('PUSH: ' + el);\r\n\r\n    //   arr.push(el);\r\n    // }\r\n\r\n    const final: IServerResponseTiles = {\r\n      tiles: arr\r\n    };\r\n\r\n    return final;\r\n  });\r\n\r\nexport const getTileById = (id: string):\r\n  Promise<Tile> => axios.get<Tile>(poo + `/api/tile/id/{id}`)\r\n  .then((res) => res.data);\r\n\r\nexport const modifyProjectById = (id: string, tile: Tile):\r\n  Promise<null> => axios.put<null>(poo + `/api/tile/id/{id}`, tile)\r\n  .then((res) => res.data);\r\n\r\nexport const createTile = (tile: Tile):\r\n  Promise<Tile> => axios.post<Tile>(poo + `/api/tile/createtile`, tile)\r\n  .then((res) => res.data);\r\n\r\nexport const deleteTile = (id: string):\r\n  Promise<null> => axios.delete<null>(poo + `/api/tile/id/{id}`)\r\n  .then((res) => res.data);\r\n\r\nexport const deleteAll = ():\r\n  Promise<null> => axios.delete<null>(poo + `/api/tile/deleteall`)\r\n  .then((res) => res.data);",["49","50"],"C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\CreateProjectPage.tsx",["51"],"import { Button, Card, Checkbox, Container, FormControlLabel, TextField } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {createProject} from \"../api/Project\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { demoHomePage } from '../index'; \r\nimport { createTile, Tile } from '../api/Tile';\r\n\r\nfunction CreateProjectPage() {\r\n    const history = useHistory();\r\n    \r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n\r\n        container: {\r\n            backgroundColor: '#e1f5fe',\r\n            height: '1000',\r\n        },\r\n\r\n        dialogue: {\r\n            padding: theme.spacing(2),\r\n        }\r\n    }));\r\n\r\n    const [state, setState] = React.useState({\r\n        projectName: \"\",\r\n        projectDescription: \"\",\r\n        projectGithubUrl: \"\",\r\n        projectIsOpen: true,\r\n    });\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n    const onProjectNameUpdate = (event: any) => {\r\n        state.projectName = event.target.value;\r\n    };\r\n\r\n    const onProjectDescriptionUpdate = (event: any) => {\r\n        state.projectDescription = event.target.value;\r\n    };\r\n\r\n    const onProjectGitHubUrlUpdate = (event: any) => {\r\n        state.projectGithubUrl = event.target.value;\r\n    }\r\n\r\n    // on create button pushed\r\n    //////////////////////////////////////////////////////////////////////\r\n    // todo: trigger a request to the service with the properties in state\r\n    //////////////////////////////////////////////////////////////////////\r\n    const onCreateProject = (event: any) => {\r\n        const myProj = {\r\n            title: state.projectName,\r\n            githubUrl: state.projectGithubUrl,\r\n            description: state.projectDescription,\r\n            acceptingVolunteers: state.projectIsOpen\r\n        }\r\n\r\n        const d: Date = new Date();\r\n\r\n        const myTile: Tile = {\r\n            title: myProj.title,\r\n            dateTime: d.toDateString(),\r\n            content: myProj.description\r\n        }\r\n\r\n        console.log(JSON.stringify(myProj));\r\n        createProject(myProj)\r\n          .then();\r\n        createTile(myTile)\r\n            .then(() => demoHomePage());\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Card className={classes.dialogue}>\r\n                <div>\r\n                    <TextField onChange={onProjectNameUpdate} id=\"project-name\" label=\"Project Name\"/>\r\n                </div>\r\n                <div>\r\n                    <TextField onChange={onProjectDescriptionUpdate} id=\"project-description\" multiline label=\"Description\"/>\r\n                </div>\r\n                <div>\r\n                    <TextField onChange={onProjectGitHubUrlUpdate} id=\"project-github-url\" label=\"GitHub Repo URL\"/>\r\n                </div>\r\n                <div>\r\n                    <FormControlLabel\r\n                        control={<Checkbox id=\"project-is-open\" onChange={handleChange} checked={state.projectIsOpen} name=\"projectIsOpen\" />}\r\n                        label=\"Open to Volunteers\"\r\n                    />    \r\n                </div>\r\n                <div>\r\n                    <Button onClick={onCreateProject} variant=\"contained\">Create Project</Button>\r\n                </div>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default CreateProjectPage;","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\Homepage.tsx",["52","53","54","55","56","57"],"import React, {useEffect, useState} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { Typography } from '@material-ui/core';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport {getAllTiles, Tile, IServerResponseTiles} from '../api/Tile';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { IServerResponseProjects } from '../api/Project';\r\nimport { demoCreateProject } from '..';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        light: '#ffffff',\r\n        main: '#f3e5f5',\r\n        dark: '#c0b3c2',\r\n        contrastText: '#000000',\r\n      },\r\n      secondary: {\r\n        light: '#edffff',\r\n        main: '#baddf9',\r\n        dark: '#89abc6',\r\n        contrastText: '#000000',\r\n      },\r\n    },\r\n  });\r\n\r\n// styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(2),\r\n        backgroundColor: '#c8e6c9',\r\n        height: '1000vw',\r\n    },\r\n    appbar: {\r\n        color: '#000000',\r\n        backgroundColor: \"#e1f5fe\",\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 0,\r\n      margin: theme.spacing(4),\r\n    },\r\n    card: {\r\n      padding: theme.spacing(8),\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      backgroundColor: '#ffffff',\r\n    },\r\n    controls: {\r\n      align: 'right',\r\n    },\r\n    button: {\r\n      backgroundColor: '#ffffff',\r\n      color: '#000',\r\n    },\r\n    checkbox: {\r\n        color: '#ffffff',\r\n        '&$checked': {\r\n            color: '#ffffff',\r\n        },\r\n    }\r\n}));\r\n\r\n// todo: \r\n// - pass in a onClickListener to FormControlLabel to handle the\r\n// clicking of the checkbox\r\n// - handle the clicking of the Post New Project button\r\n// function Controls(state: any, callback: any) {\r\n//     const classes = useStyles();\r\n//     return (\r\n//         <AppBar position=\"static\">\r\n//             <Toolbar>\r\n//                 <Typography variant=\"h1\" className={classes.title}>\r\n//                     Agora\r\n//                 </Typography>\r\n//                 <FormControlLabel\r\n//                     control={<Checkbox checked={state.isOpenOnly} onClick={callback} name=\"isOpenOnly\" />}\r\n//                     label=\"Is Open\"\r\n//                 />\r\n//                 <Button variant=\"contained\" color=\"secondary\" href=\"#contained-buttons\">\r\n//                     Post New Project\r\n//                 </Button>\r\n//             </Toolbar>\r\n//         </AppBar>\r\n//     );\r\n// }\r\n\r\nfunction TimelineItem(item: Tile) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Card className={classes.card}>\r\n                <Typography variant=\"caption\">{item.dateTime}</Typography>\r\n                <Typography variant=\"h4\">{item.title}</Typography>\r\n                <Typography variant=\"body2\">{item.content}</Typography>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction Timeline(response: IServerResponseTiles) {\r\n    const items: Tile[] = response.tiles;\r\n\r\n    return (\r\n        <Grid container >\r\n            {\r\n                items.map((item, index) => (\r\n                  <TimelineItem title={item.title} authorId={item.authorId} dateTime={item.dateTime} projectId={item.projectId} content={item.content} />\r\n                ))\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n\r\n// todo: add dynamic state functionality\r\nfunction Homepage(timeline: IServerResponseTiles) {\r\n    const [tiles, setTiles] = useState<Tile[] | null>(null)\r\n    const [state, setState] = useState({\r\n        checkedA: true,\r\n    });\r\n    ///////////////////////////////////////////////////////\r\n    // todo: trigger a change to display only open projects\r\n    ///////////////////////////////////////////////////////\r\n    const handleCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n    //////////////////////////////////////////////\r\n    // todo: bring user to the create project page\r\n    //////////////////////////////////////////////\r\n    const handleButton = (event: any) => {\r\n        demoCreateProject();\r\n    }\r\n    \r\n    // useEffect(() => {\r\n    // const tiles = getAllTiles()\r\n    //   .then((data) => setTiles(data))\r\n    // })\r\n    \r\n    // replace props with TypeScript typed information\r\n    const classes = useStyles();\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n            <AppBar position=\"static\" className={classes.appbar}>\r\n                <Toolbar>\r\n                    <div>\r\n                        <Typography variant=\"h2\" className={classes.title}>\r\n                            Agora\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.controls}>\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={state.checkedA} onChange={handleCheckbox} name=\"checkedA\" className={classes.checkbox} />}\r\n                            label=\"Is Open Only\"\r\n                        />\r\n                        <Button onClick={handleButton} variant=\"contained\" className={classes.button}>\r\n                            Post New Project\r\n                        </Button>\r\n                    </div>\r\n                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            <Timeline {...timeline} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Homepage;","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\pages\\ProjectPage.tsx",["58","59"],"import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Project } from '../api/Project';\r\nimport { Tile } from '../api/Tile';\r\nimport { Card, CardContent, CardMedia, Grid, Typography } from '@material-ui/core';\r\n\r\n\r\n// styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        paddingTop: theme.spacing(2),\r\n        backgroundColor: '#c8e6c9',\r\n        height: '1000vw',\r\n    },\r\n\r\n    summary: {\r\n        display: 'flex',\r\n        backgroundColor: '#e1f5fe',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n\r\n    details: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n\r\n    content: {\r\n        flex: '1 0 auto',\r\n        paddingLeft: theme.spacing(2),\r\n    },\r\n\r\n    media: {\r\n        flex: '1 0 auto',\r\n        width: 300,\r\n        height: 300,\r\n    },\r\n\r\n    timelineItem: {\r\n    },\r\n\r\n}));\r\n\r\n// displays the project summary\r\nfunction ProjectSummary(project: any) {\r\n    const p  = project.project;\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.summary}>\r\n            <CardMedia \r\n                className={classes.media}\r\n                image={project.image}\r\n            />\r\n            <div className={classes.details}>\r\n                <CardContent className={classes.content}>\r\n                    <Typography variant=\"h6\">{p.title}</Typography>\r\n                    <Typography variant=\"body1\">{p.description}</Typography>\r\n                    <Typography variant=\"body1\">\r\n                        <a href={p.githubUrl}>GitHub</a>\r\n                    </Typography>\r\n                </CardContent>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\n// todo: update timeline items with ones from project\r\nfunction ProjectTimeline(props: {items: Tile[] }) {\r\n    const {items} = props;\r\n    const classes = useStyles();\r\n    return (\r\n        <Card>\r\n            {items.map((item, index) => {\r\n                return (\r\n                    <Grid key={index} item className={classes.content}>\r\n                        <h1>item.title</h1>\r\n                        <p>item.description</p>\r\n                    </Grid>\r\n                );\r\n            })}\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction TimelineCard(tile: Tile) {\r\n    return <h1>Card</h1>;\r\n}\r\n\r\n// projectId: the ID of the project to create the page for\r\nfunction ProjectPage(project: Project) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n            <ProjectSummary {...project} />\r\n            {/* <ProjectTimeline items = {project.timeline as Tile[]} /> */}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ProjectPage;","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Project.ts",["60"],"import axios from 'axios';\r\nimport {Tile} from \"./Tile\";\r\nimport { ownerDocument } from '@material-ui/core';\r\n\r\nexport type Project = {\r\n  title: string,\r\n  projectId?: number,\r\n  ownerId?: string,\r\n  volunteerIds?: string[],\r\n  thumbnailUrl?: string,\r\n  githubUrl: string,\r\n  description: string,\r\n  acceptingVolunteers: boolean,\r\n  timeline?: Tile[]\r\n}\r\n\r\nexport type CreateProjectParams = {\r\n  title: string,\r\n  ownerId: string,\r\n  thumbnailUrl: string,\r\n  githubUrl: string,\r\n  description: string,\r\n  acceptingVolunteers: boolean\r\n}\r\n\r\nconst poo = \"http://localhost:3001\";\r\n\r\nexport interface IServerResponseProjects {\r\n  projects: Project[]\r\n}\r\n\r\nexport const getAllProjects = ():\r\n  Promise<IServerResponseProjects> => axios.get<Project[]>(poo + `/api/project`)\r\n  .then((res) => {\r\n    const arr: Project[] = [];\r\n\r\n    const test: any[] = res.data;\r\n\r\n    for (let i = 0; i < test.length; i++) {\r\n      const e: any = test[i];\r\n\r\n      const el: Project = {\r\n        title: e.title,\r\n        githubUrl: e.githubUrl,\r\n        description: e.description,\r\n        acceptingVolunteers: e.acceptingVolunteers\r\n      };\r\n\r\n      arr.push(el);\r\n    }\r\n\r\n    const final: IServerResponseProjects = {\r\n      projects: arr\r\n    };\r\n\r\n    return final;\r\n  });\r\n// export const getAllProjects = ():\r\n//   Promise<Project[]> => axios.get<Project[]>(poo + `/api/project`)\r\n//   .then((res) => res.data);\r\n\r\nexport const getProjectById = (id: string):\r\nPromise<Project> => axios.get<Project>(poo + `/api/project/id/` + id)\r\n  .then((res) => res.data);\r\n\r\nexport const modifyProjectById = (id: string, project: Project):\r\n  Promise<null> => axios.put<null>(poo + `/api/id/{id}`, project)\r\n  .then((res) => res.data);\r\n\r\nexport const createProject = (project: Project):\r\n  Promise<Project> => axios.post<Project>(poo + `/api/project/create_project`, project)\r\n  .then((res) => res.data);\r\n\r\nexport const deleteProject = (id: string):\r\n  Promise<null> => axios.delete<null>(poo + `/api/id/{id}`)\r\n  .then((res) => res.data);\r\n\r\nexport const deleteAll = ():\r\n  Promise<null> => axios.delete<null>(poo + `/api/deleteall`)\r\n  .then((res) => res.data);","C:\\Users\\elber\\Documents\\Winfo - TeamSWAN\\swan-client\\src\\api\\Photo.ts",[],{"ruleId":"61","severity":1,"message":"62","line":11,"column":10,"nodeType":"63","messageId":"64","endLine":11,"endColumn":22},{"ruleId":"61","severity":1,"message":"65","line":12,"column":23,"nodeType":"63","messageId":"64","endLine":12,"endColumn":27},{"ruleId":"61","severity":1,"message":"66","line":14,"column":7,"nodeType":"63","messageId":"64","endLine":14,"endColumn":24},{"ruleId":"61","severity":1,"message":"67","line":40,"column":7,"nodeType":"63","messageId":"64","endLine":40,"endColumn":19},{"ruleId":"61","severity":1,"message":"68","line":55,"column":9,"nodeType":"63","messageId":"64","endLine":55,"endColumn":20},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":9,"nodeType":"63","messageId":"64","endLine":2,"endColumn":16},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"75","line":10,"column":11,"nodeType":"63","messageId":"64","endLine":10,"endColumn":18},{"ruleId":"73","severity":1,"message":"76","line":1,"column":16,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},{"ruleId":"73","severity":1,"message":"77","line":12,"column":9,"nodeType":"63","messageId":"64","endLine":12,"endColumn":20},{"ruleId":"73","severity":1,"message":"78","line":14,"column":10,"nodeType":"63","messageId":"64","endLine":14,"endColumn":33},{"ruleId":"73","severity":1,"message":"79","line":17,"column":7,"nodeType":"63","messageId":"64","endLine":17,"endColumn":12},{"ruleId":"73","severity":1,"message":"80","line":129,"column":12,"nodeType":"63","messageId":"64","endLine":129,"endColumn":17},{"ruleId":"73","severity":1,"message":"81","line":129,"column":19,"nodeType":"63","messageId":"64","endLine":129,"endColumn":27},{"ruleId":"73","severity":1,"message":"82","line":68,"column":10,"nodeType":"63","messageId":"64","endLine":68,"endColumn":25},{"ruleId":"73","severity":1,"message":"83","line":85,"column":10,"nodeType":"63","messageId":"64","endLine":85,"endColumn":22},{"ruleId":"73","severity":1,"message":"84","line":3,"column":10,"nodeType":"63","messageId":"64","endLine":3,"endColumn":23},"no-unused-vars","'getPhotoById' is defined but never used.","Identifier","unusedVar","'Tile' is defined but never used.","'demo_timelineTile' is assigned a value but never used.","'demo_project' is assigned a value but never used.","'allProjects' is assigned a value but never used.","no-native-reassign",["85"],"no-negated-in-lhs",["86"],"@typescript-eslint/no-unused-vars","'Project' is defined but never used.","'history' is assigned a value but never used.","'useEffect' is defined but never used.","'getAllTiles' is defined but never used.","'IServerResponseProjects' is defined but never used.","'theme' is assigned a value but never used.","'tiles' is assigned a value but never used.","'setTiles' is assigned a value but never used.","'ProjectTimeline' is defined but never used.","'TimelineCard' is defined but never used.","'ownerDocument' is defined but never used.","no-global-assign","no-unsafe-negation"]
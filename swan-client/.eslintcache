[{"/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/index.js":"1","/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/reportWebVitals.js":"2","/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/pages/Homepage.tsx":"3","/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/pages/ProjectPage.tsx":"4","/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/api/Tile.ts":"5","/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/pages/CreateProjectPage.tsx":"6","/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/api/Project.ts":"7"},{"size":2612,"mtime":1610852690995,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1610784089454,"results":"10","hashOfConfig":"9"},{"size":5561,"mtime":1610852630285,"results":"11","hashOfConfig":"9"},{"size":2626,"mtime":1610853750501,"results":"12","hashOfConfig":"9"},{"size":950,"mtime":1610843378708,"results":"13","hashOfConfig":"9"},{"size":3099,"mtime":1610853196120,"results":"14","hashOfConfig":"9"},{"size":1254,"mtime":1610853014347,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1bkol6r",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/index.js",["35","36","37"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CreateProjectPage from './pages/CreateProjectPage';\nimport Homepage from './pages/Homepage';\nimport './index.css';\n// import App from './App';\n// import Homepage from './Homepage';\nimport ProjectPage from './pages/ProjectPage';\nimport reportWebVitals from './reportWebVitals';\n\n// demo object: timeline tile\nconst demo_timelineTile = \n  [\n    {\n      title: \"Timeline Tile Title 0\",\n      authorId: 12345,\n      dateTime: \"1.1.1\",\n      projectId: 12345,\n      content: \"Tile Content Tile Content Tile Content\",\n    },\n    {\n      title: \"Timeline Tile Title 1\",\n      authorId: 12345,\n      dateTime: \"1.1.1\",\n      projectId: 12345,\n      content: \"Tile Content Tile Content Tile Content\",\n    },\n    {\n      title: \"Timeline Tile Title 2\",\n      authorId: 12345,\n      dateTime: \"1.1.1\",\n      projectId: 12345,\n      content: \"Tile Content Tile Content Tile Content\",\n    },\n  ];\n\n// demo object: project\nconst demo_project = {\n  title: \"Sample Project\",\n  projectId: 101,\n  ownerId: \"wenjalan\",\n  volunteerIds: [\"elbertkcheng\", \"helen.li\", \"morticus\"],\n  thumbnailUrl: \"https://cdn.discordapp.com/attachments/796478136866963477/799822410945396786/unknown.png\",\n  githubUrl: \"https://github.com/treblenaX/winfo2021teamswan\",\n  description: \"Agora is a project platform for organizations and developers to promote their work and recruit new members\",\n  acceptingVolunteers: true,\n  timeline: [],\n}\n\n// demo entrypoint: Homepage\nfunction demoHomePage() {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Homepage items = {demo_timelineTile} />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\n// demo entrypoint: Project Page\nfunction demoProjectPage() {\n  ReactDOM.render(\n    <React.StrictMode>\n      <ProjectPage {...demo_project} />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\n// demo entrypoint: Create Project Page\nfunction demoCreateProject() {\n  ReactDOM.render(\n    <React.StrictMode>\n      <CreateProjectPage />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\n// production entrypoint\nfunction start() {\n  ReactDOM.render(\n    <React.StrictMode>\n      <CreateProjectPage />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\n// start program\n// start();\n// demoHomePage();\n// demoProjectPage();\ndemoCreateProject();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["38","39"],"/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/reportWebVitals.js",[],"/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/pages/Homepage.tsx",["40","41"],"import React, {useEffect, useState} from 'react';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Typography } from '@material-ui/core';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport {getAllTiles, Tile} from '../api/Tile';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: {\n        light: '#ffffff',\n        main: '#f3e5f5',\n        dark: '#c0b3c2',\n        contrastText: '#000000',\n      },\n      secondary: {\n        light: '#edffff',\n        main: '#baddf9',\n        dark: '#89abc6',\n        contrastText: '#000000',\n      },\n    },\n  });\n\n// styles\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    container: {\n        paddingTop: theme.spacing(2),\n        backgroundColor: '#c8e6c9',\n        height: '1000vw',\n    },\n    appbar: {\n        color: '#000000',\n        backgroundColor: \"#e1f5fe\",\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 0,\n      margin: theme.spacing(4),\n    },\n    card: {\n      padding: theme.spacing(8),\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      backgroundColor: '#ffffff',\n    },\n    controls: {\n      align: 'right',\n    },\n    button: {\n      backgroundColor: '#ffffff',\n      color: '#000',\n    },\n    checkbox: {\n        color: '#ffffff',\n        '&$checked': {\n            color: '#ffffff',\n        },\n    }\n}));\n\n// todo: \n// - pass in a onClickListener to FormControlLabel to handle the\n// clicking of the checkbox\n// - handle the clicking of the Post New Project button\n// function Controls(state: any, callback: any) {\n//     const classes = useStyles();\n//     return (\n//         <AppBar position=\"static\">\n//             <Toolbar>\n//                 <Typography variant=\"h1\" className={classes.title}>\n//                     Agora\n//                 </Typography>\n//                 <FormControlLabel\n//                     control={<Checkbox checked={state.isOpenOnly} onClick={callback} name=\"isOpenOnly\" />}\n//                     label=\"Is Open\"\n//                 />\n//                 <Button variant=\"contained\" color=\"secondary\" href=\"#contained-buttons\">\n//                     Post New Project\n//                 </Button>\n//             </Toolbar>\n//         </AppBar>\n//     );\n// }\n\nfunction TimelineItem(item: Tile) {\n    const classes = useStyles();\n    return (\n        <Grid item xs={12}>\n            <Card className={classes.card}>\n                <Typography variant=\"caption\">{item.dateTime}</Typography>\n                <Typography variant=\"h4\">{item.title}</Typography>\n                <Typography variant=\"body2\">{item.content}</Typography>\n            </Card>\n        </Grid>\n    );\n}\n\nfunction Timeline(props: {items: Tile[] }) {\n    const {items} = props;\n    return (\n        <Grid container >\n            {\n                items.map((item, index) => (\n                  <TimelineItem title={item.title} authorId={item.authorId} dateTime={item.dateTime} projectId={item.projectId} content={item.content} />\n                ))\n            }\n        </Grid>\n    );\n}\n\n// todo: add dynamic state functionality\nfunction Homepage() {\n    const [tiles, setTiles] = useState<Tile[] | null>(null)\n    const [state, setState] = useState({\n        checkedA: true,\n    });\n\n    ///////////////////////////////////////////////////////\n    // todo: trigger a change to display only open projects\n    ///////////////////////////////////////////////////////\n    const handleCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n    };\n\n    //////////////////////////////////////////////\n    // todo: bring user to the create project page\n    //////////////////////////////////////////////\n    const handleButton = (event: any) => {\n        console.log('New Project Button');\n    }\n    \n    useEffect(() => {\n    const tiles = getAllTiles()\n      .then((data) => setTiles(data))\n    })\n    \n    // replace props with TypeScript typed information\n    const classes = useStyles();\n    return (\n        <Container maxWidth=\"lg\" className={classes.container}>\n            <AppBar position=\"static\" className={classes.appbar}>\n                <Toolbar>\n                    <div>\n                        <Typography variant=\"h2\" className={classes.title}>\n                            Agora\n                        </Typography>\n                    </div>\n                    <div className={classes.controls}>\n                        <FormControlLabel\n                            control={<Checkbox checked={state.checkedA} onChange={handleCheckbox} name=\"checkedA\" className={classes.checkbox} />}\n                            label=\"Is Open Only\"\n                        />\n                        <Button onClick={handleButton} variant=\"contained\" className={classes.button}>\n                            Post New Project\n                        </Button>\n                    </div>\n                    \n                </Toolbar>\n            </AppBar>\n            <Timeline items = {tiles as Tile[]} />\n        </Container>\n    );\n}\n\nexport default Homepage;",["42","43"],"/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/pages/ProjectPage.tsx",["44"],"/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/api/Tile.ts",["45"],"import axios from \"axios\";\nimport {Project} from \"./Project\";\n\nexport type Tile = {\n  title: string,\n  authorId: string,\n  dateTime: Date,\n  projectId: number,\n  content: string\n}\n\nexport const getAllTiles = ():\n  Promise<Tile[]> => axios.get<Tile[]>(`/api/tile/getall`)\n  .then((res) => res.data);\n\nexport const getTileById = (id: string):\n  Promise<Tile> => axios.get<Tile>(`/api/tile/id/{id}`)\n  .then((res) => res.data);\n\nexport const modifyProjectById = (id: string, tile: Tile):\n  Promise<null> => axios.put<null>(`/api/tile/id/{id}`, tile)\n  .then((res) => res.data);\n\nexport const createTile = (tile: Tile):\n  Promise<Tile> => axios.post<Tile>(`/api/tile/createtile`)\n  .then((res) => res.data);\n\nexport const deleteTile = (id: string):\n  Promise<null> => axios.delete<null>(`/api/tile/id/{id}`)\n  .then((res) => res.data);\n\nexport const deleteAll = ():\n  Promise<null> => axios.delete<null>(`/api/tile/deleteall`)\n  .then((res) => res.data);","/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/pages/CreateProjectPage.tsx",[],"/Users/helenli/Desktop/IdeaProjects/winfo2021teamswan/swan-client/src/api/Project.ts",[],{"ruleId":"46","severity":1,"message":"47","line":51,"column":10,"nodeType":"48","messageId":"49","endLine":51,"endColumn":22},{"ruleId":"46","severity":1,"message":"50","line":61,"column":10,"nodeType":"48","messageId":"49","endLine":61,"endColumn":25},{"ruleId":"46","severity":1,"message":"51","line":81,"column":10,"nodeType":"48","messageId":"49","endLine":81,"endColumn":15},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":15,"column":7,"nodeType":"48","messageId":"49","endLine":15,"endColumn":12},{"ruleId":"56","severity":1,"message":"58","line":146,"column":11,"nodeType":"48","messageId":"49","endLine":146,"endColumn":16},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"59","line":84,"column":10,"nodeType":"48","messageId":"49","endLine":84,"endColumn":22},{"ruleId":"56","severity":1,"message":"60","line":2,"column":9,"nodeType":"48","messageId":"49","endLine":2,"endColumn":16},"no-unused-vars","'demoHomePage' is defined but never used.","Identifier","unusedVar","'demoProjectPage' is defined but never used.","'start' is defined but never used.","no-native-reassign",["61"],"no-negated-in-lhs",["62"],"@typescript-eslint/no-unused-vars","'theme' is assigned a value but never used.","'tiles' is assigned a value but never used.","'TimelineCard' is defined but never used.","'Project' is defined but never used.","no-global-assign","no-unsafe-negation"]
[{"C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\index.js":"1","C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\reportWebVitals.js":"2","C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\pages\\Homepage.tsx":"3","C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\pages\\CreateProjectPage.tsx":"4","C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\pages\\ProjectPage.tsx":"5","C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\api\\Tile.ts":"6","C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\api\\Project.ts":"7"},{"size":2910,"mtime":1610857782204,"results":"8","hashOfConfig":"9"},{"size":375,"mtime":1610784877217,"results":"10","hashOfConfig":"9"},{"size":5738,"mtime":1610856832115,"results":"11","hashOfConfig":"9"},{"size":3190,"mtime":1610856523744,"results":"12","hashOfConfig":"9"},{"size":2724,"mtime":1610856523758,"results":"13","hashOfConfig":"9"},{"size":983,"mtime":1610851503479,"results":"14","hashOfConfig":"9"},{"size":1324,"mtime":1610858849296,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"xl4dmd",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\index.js",["36","37","38","39"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CreateProjectPage from './pages/CreateProjectPage';\r\nimport Homepage from './pages/Homepage';\r\nimport './index.css';\r\n// import App from './App';\r\n// import Homepage from './Homepage';\r\nimport ProjectPage from './pages/ProjectPage';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {getProjectById} from './api/Project';\r\n\r\n// demo object: timeline tile\r\nconst demo_timelineTile = \r\n  [\r\n    {\r\n      title: \"Timeline Tile Title 0\",\r\n      authorId: 12345,\r\n      dateTime: \"1.1.1\",\r\n      projectId: 12345,\r\n      content: \"Tile Content Tile Content Tile Content\",\r\n    },\r\n    {\r\n      title: \"Timeline Tile Title 1\",\r\n      authorId: 12345,\r\n      dateTime: \"1.1.1\",\r\n      projectId: 12345,\r\n      content: \"Tile Content Tile Content Tile Content\",\r\n    },\r\n    {\r\n      title: \"Timeline Tile Title 2\",\r\n      authorId: 12345,\r\n      dateTime: \"1.1.1\",\r\n      projectId: 12345,\r\n      content: \"Tile Content Tile Content Tile Content\",\r\n    },\r\n  ];\r\n\r\n// demo object: project\r\nconst demo_project = {\r\n  title: \"Sample Project\",\r\n  projectId: 101,\r\n  ownerId: \"wenjalan\",\r\n  volunteerIds: [\"elbertkcheng\", \"helen.li\", \"morticus\"],\r\n  thumbnailUrl: \"https://cdn.discordapp.com/attachments/796478136866963477/799822410945396786/unknown.png\",\r\n  githubUrl: \"https://github.com/treblenaX/winfo2021teamswan\",\r\n  description: \"Agora is a project platform for organizations and developers to promote their work and recruit new members\",\r\n  acceptingVolunteers: true,\r\n  timeline: [],\r\n}\r\n\r\n// demo entrypoint: Homepage\r\nfunction demoHomePage() {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Homepage items = {demo_timelineTile} />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n}\r\n\r\n// demo entrypoint: Project Page\r\nasync function demoProjectPage() {\r\n  console.log('Loading demo Project Page');\r\n  const starbotProjectId = \"60039d73102aaf24f8ea8f78\";\r\n  const project = await getProjectById(starbotProjectId);\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <ProjectPage {...project} />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n}\r\n\r\n// demo entrypoint: Create Project Page\r\nfunction demoCreateProject() {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <CreateProjectPage />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n}\r\n\r\n// production entrypoint\r\nfunction start() {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Homepage />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n}\r\n\r\n// start program\r\n// start();\r\n// demoHomePage();\r\ndemoProjectPage();\r\n// demoCreateProject();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["40","41"],"C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\reportWebVitals.js",[],"C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\pages\\Homepage.tsx",["42","43"],"import React, {useEffect, useState} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { Typography } from '@material-ui/core';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport {getAllTiles, Tile} from '../api/Tile';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        light: '#ffffff',\r\n        main: '#f3e5f5',\r\n        dark: '#c0b3c2',\r\n        contrastText: '#000000',\r\n      },\r\n      secondary: {\r\n        light: '#edffff',\r\n        main: '#baddf9',\r\n        dark: '#89abc6',\r\n        contrastText: '#000000',\r\n      },\r\n    },\r\n  });\r\n\r\n// styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(2),\r\n        backgroundColor: '#c8e6c9',\r\n        height: '1000vw',\r\n    },\r\n    appbar: {\r\n        color: '#000000',\r\n        backgroundColor: \"#e1f5fe\",\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 0,\r\n      margin: theme.spacing(4),\r\n    },\r\n    card: {\r\n      padding: theme.spacing(8),\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      backgroundColor: '#ffffff',\r\n    },\r\n    controls: {\r\n      align: 'right',\r\n    },\r\n    button: {\r\n      backgroundColor: '#ffffff',\r\n      color: '#000',\r\n    },\r\n    checkbox: {\r\n        color: '#ffffff',\r\n        '&$checked': {\r\n            color: '#ffffff',\r\n        },\r\n    }\r\n}));\r\n\r\n// todo: \r\n// - pass in a onClickListener to FormControlLabel to handle the\r\n// clicking of the checkbox\r\n// - handle the clicking of the Post New Project button\r\n// function Controls(state: any, callback: any) {\r\n//     const classes = useStyles();\r\n//     return (\r\n//         <AppBar position=\"static\">\r\n//             <Toolbar>\r\n//                 <Typography variant=\"h1\" className={classes.title}>\r\n//                     Agora\r\n//                 </Typography>\r\n//                 <FormControlLabel\r\n//                     control={<Checkbox checked={state.isOpenOnly} onClick={callback} name=\"isOpenOnly\" />}\r\n//                     label=\"Is Open\"\r\n//                 />\r\n//                 <Button variant=\"contained\" color=\"secondary\" href=\"#contained-buttons\">\r\n//                     Post New Project\r\n//                 </Button>\r\n//             </Toolbar>\r\n//         </AppBar>\r\n//     );\r\n// }\r\n\r\nfunction TimelineItem(item: Tile) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Card className={classes.card}>\r\n                <Typography variant=\"caption\">{item.dateTime}</Typography>\r\n                <Typography variant=\"h4\">{item.title}</Typography>\r\n                <Typography variant=\"body2\">{item.content}</Typography>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction Timeline(props: {items: Tile[] }) {\r\n    const {items} = props;\r\n    return (\r\n        <Grid container >\r\n            {\r\n                items.map((item, index) => (\r\n                  <TimelineItem title={item.title} authorId={item.authorId} dateTime={item.dateTime} projectId={item.projectId} content={item.content} />\r\n                ))\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n\r\n// todo: add dynamic state functionality\r\nfunction Homepage() {\r\n    const [tiles, setTiles] = useState<Tile[] | null>(null)\r\n    const [state, setState] = useState({\r\n        checkedA: true,\r\n    });\r\n\r\n    ///////////////////////////////////////////////////////\r\n    // todo: trigger a change to display only open projects\r\n    ///////////////////////////////////////////////////////\r\n    const handleCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n    };\r\n\r\n    //////////////////////////////////////////////\r\n    // todo: bring user to the create project page\r\n    //////////////////////////////////////////////\r\n    const handleButton = (event: any) => {\r\n        console.log('New Project Button');\r\n    }\r\n    \r\n    useEffect(() => {\r\n    const tiles = getAllTiles()\r\n      .then((data) => setTiles(data))\r\n    })\r\n    \r\n    // replace props with TypeScript typed information\r\n    const classes = useStyles();\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n            <AppBar position=\"static\" className={classes.appbar}>\r\n                <Toolbar>\r\n                    <div>\r\n                        <Typography variant=\"h2\" className={classes.title}>\r\n                            Agora\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={classes.controls}>\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={state.checkedA} onChange={handleCheckbox} name=\"checkedA\" className={classes.checkbox} />}\r\n                            label=\"Is Open Only\"\r\n                        />\r\n                        <Button onClick={handleButton} variant=\"contained\" className={classes.button}>\r\n                            Post New Project\r\n                        </Button>\r\n                    </div>\r\n                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            <Timeline items = {tiles as Tile[]} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Homepage;",["44","45"],"C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\pages\\CreateProjectPage.tsx",[],"C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\pages\\ProjectPage.tsx",["46"],"import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Project } from '../api/Project';\r\nimport { Tile } from '../api/Tile';\r\nimport { Card, CardContent, CardMedia, Grid, Typography } from '@material-ui/core';\r\n\r\n\r\n// styles\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        paddingTop: theme.spacing(2),\r\n        backgroundColor: '#c8e6c9',\r\n        height: '1000vw',\r\n    },\r\n\r\n    summary: {\r\n        display: 'flex',\r\n        backgroundColor: '#e1f5fe',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n\r\n    details: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n\r\n    content: {\r\n        flex: '1 0 auto',\r\n        paddingLeft: theme.spacing(2),\r\n    },\r\n\r\n    media: {\r\n        flex: '1 0 auto',\r\n        width: 300,\r\n        height: 300,\r\n    },\r\n\r\n    timelineItem: {\r\n    },\r\n\r\n}));\r\n\r\n// displays the project summary\r\nfunction ProjectSummary(project: Project) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.summary}>\r\n            <CardMedia \r\n                className={classes.media}\r\n                image={project.thumbnailUrl}\r\n            />\r\n            <div className={classes.details}>\r\n                <CardContent className={classes.content}>\r\n                    <Typography variant=\"h6\">{project.title}</Typography>\r\n                    <Typography variant=\"body1\">{project.description}</Typography>\r\n                    <Typography variant=\"body1\">\r\n                        <a href={project.githubUrl}>GitHub</a>\r\n                    </Typography>\r\n                </CardContent>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\n// todo: update timeline items with ones from project\r\nfunction ProjectTimeline(props: {items: Tile[] }) {\r\n    const {items} = props;\r\n    const classes = useStyles();\r\n    return (\r\n        <Card>\r\n            {items.map((item, index) => {\r\n                return (\r\n                    <Grid key={index} item className={classes.content}>\r\n                        <h1>item.title</h1>\r\n                        <p>item.description</p>\r\n                    </Grid>\r\n                );\r\n            })}\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction TimelineCard(tile: Tile) {\r\n    return <h1>Card</h1>;\r\n}\r\n\r\n// projectId: the ID of the project to create the page for\r\nfunction ProjectPage(project: Project) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n            <ProjectSummary {...project} />\r\n            <ProjectTimeline items = {project.timeline as Tile[]} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ProjectPage;","C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\api\\Tile.ts",["47"],"import axios from \"axios\";\r\nimport {Project} from \"./Project\";\r\n\r\nexport type Tile = {\r\n  title: string,\r\n  authorId: string,\r\n  dateTime: Date,\r\n  projectId: number,\r\n  content: string\r\n}\r\n\r\nexport const getAllTiles = ():\r\n  Promise<Tile[]> => axios.get<Tile[]>(`/api/tile/getall`)\r\n  .then((res) => res.data);\r\n\r\nexport const getTileById = (id: string):\r\n  Promise<Tile> => axios.get<Tile>(`/api/tile/id/{id}`)\r\n  .then((res) => res.data);\r\n\r\nexport const modifyProjectById = (id: string, tile: Tile):\r\n  Promise<null> => axios.put<null>(`/api/tile/id/{id}`, tile)\r\n  .then((res) => res.data);\r\n\r\nexport const createTile = (tile: Tile):\r\n  Promise<Tile> => axios.post<Tile>(`/api/tile/createtile`)\r\n  .then((res) => res.data);\r\n\r\nexport const deleteTile = (id: string):\r\n  Promise<null> => axios.delete<null>(`/api/tile/id/{id}`)\r\n  .then((res) => res.data);\r\n\r\nexport const deleteAll = ():\r\n  Promise<null> => axios.delete<null>(`/api/tile/deleteall`)\r\n  .then((res) => res.data);","C:\\GitHub\\winfo2021teamswan\\swan-client\\src\\api\\Project.ts",[],{"ruleId":"48","severity":1,"message":"49","line":39,"column":7,"nodeType":"50","messageId":"51","endLine":39,"endColumn":19},{"ruleId":"48","severity":1,"message":"52","line":52,"column":10,"nodeType":"50","messageId":"51","endLine":52,"endColumn":22},{"ruleId":"48","severity":1,"message":"53","line":75,"column":10,"nodeType":"50","messageId":"51","endLine":75,"endColumn":27},{"ruleId":"48","severity":1,"message":"54","line":85,"column":10,"nodeType":"50","messageId":"51","endLine":85,"endColumn":15},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":15,"column":7,"nodeType":"50","messageId":"51","endLine":15,"endColumn":12},{"ruleId":"59","severity":1,"message":"61","line":146,"column":11,"nodeType":"50","messageId":"51","endLine":146,"endColumn":16},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"62","line":84,"column":10,"nodeType":"50","messageId":"51","endLine":84,"endColumn":22},{"ruleId":"59","severity":1,"message":"63","line":2,"column":9,"nodeType":"50","messageId":"51","endLine":2,"endColumn":16},"no-unused-vars","'demo_project' is assigned a value but never used.","Identifier","unusedVar","'demoHomePage' is defined but never used.","'demoCreateProject' is defined but never used.","'start' is defined but never used.","no-native-reassign",["64"],"no-negated-in-lhs",["65"],"@typescript-eslint/no-unused-vars","'theme' is assigned a value but never used.","'tiles' is assigned a value but never used.","'TimelineCard' is defined but never used.","'Project' is defined but never used.","no-global-assign","no-unsafe-negation"]